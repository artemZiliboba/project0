import logging
import os

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from logger_setup import setup_logger
from nasa.gigachat import post_get_token, count_tokens, ask_chat
from nasa.nasa_api import fetch_nasa_apod

EMPTY_NEWS = "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"

logger = setup_logger(__name__, log_level=logging.INFO)

TOKEN = os.getenv('TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')

if not TOKEN:
    logger.error("TOKEN is not set. Please set the TOKEN environment variable.")
    raise ValueError("TOKEN is not set.")

bot = telebot.TeleBot(TOKEN)
storage = {}


@bot.message_handler(commands=['version'])
def send_version(message):
    bot.reply_to(message, 'created by WIPEOFFS')
    logger.info(f"User {message.from_user.username} ({message.from_user.id}) sent: {message.text}")


@bot.message_handler(commands=['apod'])
def send_apod(message):
    logger.info(f"Received /apod command from {message.from_user.username} ({message.from_user.id})")

    # –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    date = message.text.split('/apod ')[-1] if len(message.text.split()) > 1 else None

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API NASA
    explanation, url, hdurl = fetch_nasa_apod(date)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GigaChat
    access_token, expires_at = post_get_token()
    content = ask_chat(access_token, "–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π - " + explanation)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = f"`{content}`\n\n[URL]({url})\n[HD URL]({hdurl})"
    bot.reply_to(message, response, parse_mode='Markdown')


@bot.message_handler(commands=['test'])
def send_version(message):
    access_token, expires_at = post_get_token()
    tokens_count, characters = count_tokens(access_token, "My some text")
    content = ask_chat(access_token, "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")

    bot.reply_to(message, f'Token is: {access_token}, expire at: {expires_at}')
    bot.reply_to(message, f'Tokens count: {tokens_count}\nCharacters count: {characters}')
    bot.reply_to(message, f'Answer gigachat - {content}')
    logger.info(f"User {message.from_user.username} ({message.from_user.id}) sent: {message.text}")


# Example: /publish 2022-02-28
@bot.message_handler(commands=['publish'])
def publish_to_channel(message):
    try:
        date = message.text.split('/publish ')[-1] if len(message.text.split()) > 1 else None
        explanation, url, hdurl, media_type, title, date = fetch_nasa_apod(date)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ GigaChat
        access_token, expires_at = post_get_token()
        content = ask_chat(access_token, "–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π - " + explanation)

        response = f"*üì∑ {date} - {title}*\n\n{content}\n\n[URL]({url})\n[HD URL]({hdurl})"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        storage[message.chat.id] = {
            "response": response,
            "photo_url": url,
        }

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
        markup = InlineKeyboardMarkup()
        publish_button = InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_news")
        decline_button = InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="decline_news")
        markup.add(publish_button, decline_button)

        bot.send_photo(message.chat.id, url, caption=response, parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, "Failed to publish message to channel.")
        logger.error(f"Failed to publish message to channel {CHANNEL_ID}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "publish_news")
def handle_publish_news(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        data = storage.pop(call.message.chat.id, None)

        if data:
            # –ü—É–±–ª–∏–∫—É–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤ –∫–∞–Ω–∞–ª
            bot.send_photo(
                CHANNEL_ID,
                data["photo_url"],
                caption=data["response"],
                parse_mode='Markdown'
            )
            bot.answer_callback_query(call.id, "–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª!")
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID} –∫–Ω–æ–ø–∫–æ–π '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'.")
        else:
            bot.answer_callback_query(call.id, "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ {call.message.chat.id}.")

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        logger.error(f"Failed to publish news to channel {CHANNEL_ID}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "decline_news")
def handle_decline_news(call):
    try:
        # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        storage.pop(call.message.chat.id, None)

        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.answer_callback_query(call.id, "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
        bot.send_message(call.message.chat.id, "–ù–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
        logger.info(f"News declined by {call.from_user.username} ({call.from_user.id})")

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
        logger.error(f"Failed to decline news: {e}")


@bot.message_handler(func=lambda message: True)
def log_message(message):
    logger.info(f"Received message from {message.from_user.username} ({message.from_user.id}): {message.text}")


if __name__ == '__main__':
    logger.info("Bot is starting...")
    bot.polling(none_stop=True)
